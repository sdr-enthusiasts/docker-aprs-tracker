#!/command/with-contenv bash
# shellcheck shell=bash

# Check to make sure the correct Direwolf parameters are defined and that the soundcard is initialized correctly.
#---------------------------------------------------------------------------------------------
# Copyright (C) 2023, Ramon F. Kolb (kx1t)
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.
#---------------------------------------------------------------------------------------------

#!/command/with-contenv bash
# shellcheck shell=bash disable=SC1091,SC2015,SC2164,SC2068,SC2145

source /scripts/common
s6wrap=(s6wrap --quiet --timestamps --prepend="$(basename "$0")" --args)

"${s6wrap[@]}" echo "Started as an s6 init script"

DWCONFIGFILE="${DWCONFIGFILE:-/run/direwolf/direwolf.conf}"

mkdir -p "$(dirname "$DWCONFIGFILE")"
cp -u /etc/direwolf/direwolf.conf "$DWCONFIGFILE"

function setdwconfig() {
# function to set direwolf config item
# usage: setdwconfig PARAM VALUE STRING
# If VALUE STRING is not present, it will simply uncomment PARAM if it exists, or add it (without values) to the end of the config file
# If VALUE STRING is specified as "VALUE" "STRING", "VALUE STRING", or "", it will uncomment and set value to PARAM VALUE STRING, or add PARAM VALUE STRING to the end of the config file if the param is not present
# If PARAM starts with "add:", it will add PARAM VALUE STRING to the end of the document regardless of the existence of the same param in the doc
# If value string == "remove" (lowercase letters), then comment PARAM if it exists
#
# Examples:
# setdwconfig PTT ON
#    # PTT CM108 --> PTT ON
# setdwconfig PTT
#    # PTT CM108 --> PTT CM108
# setdwconfig PTT remove
#    PTT CM108 --> # PTT CM108
# setdwconfig PTT ""
#    # PTT CM108 --> PTT

    local param="${1}"
    local value="${*:2}"

    if [[ -z "$param" ]]; then
        # No arguments given to function: skip
        "${s6wrap[@]}" echo "[setdwconfig] error - no arguments. Usage: setdwconfig PARAMETER VALUE STRING"
        return 1

    elif [[ -z "$value" ]]; then
        # add or uncomment + replace $param with an empty value
        if grep -qo "^\s*#*\s*${param}\b.*$" "$DWCONFIGFILE"; then
            sed -i "s|^\s*#*\s*\(${param}\b.*\)$|${param}|g" "$DWCONFIGFILE"
            "${s6wrap[@]}" echo "[INFO] Replacing: ${param}"
        else
            echo "$param" >> "$DWCONFIGFILE"
            "${s6wrap[@]}" echo "[INFO] Adding: ${param} ${value}"
        fi
    
    elif [[ "${param:0:8}" == "comment:" ]]; then
        # comment out $param if it exists; do nothing if if doesn't exist
        sed -i "s|^\s*#*\s*\(${param:8}\b.*\)$|# \1|g" "$DWCONFIGFILE"
        "${s6wrap[@]}" echo "[INFO] Commenting out (if it exists): ${param:8} ${value}"

    elif [[ "${param:0:10}" == "uncomment:" ]]; then
        # uncomment $param if it exists; do nothing if if doesn't exist
        sed -i "s|^\s*#*\s*\(${param:10}\b.*\)$|\1|g" "$DWCONFIGFILE"
        "${s6wrap[@]}" echo "[INFO] Uncommenting (if it exists): ${param:10} ${value}"
    
    elif [[ "${param:0:4}" == "add:" ]]; then
        echo -n "${param:4}${value:+ }${value}" >> "$DWCONFIGFILE"
        "${s6wrap[@]}" echo "[INFO] Adding: ${param:4} ${value}"

    else
        if grep -qo "^\s*#*\s*${param}\b.*$" "$DWCONFIGFILE"; then
            sed -i "s|^\s*#*\s*${param}\b.*$|${param} ${value}|g" "$DWCONFIGFILE"
            "${s6wrap[@]}" echo "[INFO] Replacing: ${param} ${value}"
        else
            echo -n "${param} ${value}" >> "$DWCONFIGFILE"
            "${s6wrap[@]}" echo "[INFO] Adding: ${param} ${value}"
        fi
    fi    
}

# This section is adapted from https://github.com/kx1t/docker-noisecapt/blob/main/rootfs/etc/services.d/noisecapt/run

if [[ -z "$AUDIOCARD" ]]; then
    AUDIOCARD="$(arecord --list-devices | sed  -n 's|.*card \([0-9][0-9]*\).*|\1|p')"
    if [[ -z "$AUDIOCARD" ]]; then
        "${s6wrap[@]}" echo "[FATAL] Cannot determine the audio card."
        "${s6wrap[@]}" echo "[FATAL] This is what we see:"
        "${s6wrap[@]}" arecord --list-devices
        "${s6wrap[@]}" echo "[FATAL] You MUST fix this, or set variable AUDIOCARD to the desired audio card number."
        "${s6wrap[@]}" echo "[FATAL] We are stopping the execution of the container now."
        sleep infinity & wait $!
    else
        "${s6wrap[@]}" echo "[INFO] System determined that we are using audio card #$AUDIOCARD"
    fi
else
    "${s6wrap[@]}" echo "[INFO] Using AUDIOCARD env variable for audio card #$AUDIOCARD"
fi

if [[ -z "$SUBDEVICE" ]]; then   
    SUBDEVICE="$(arecord --list-devices | sed -n 's|^\s*Subdevice #\([0-9]\+\):.*$|\1|p')"
     if [[ -z "$SUBDEVICE" ]]; then
        "${s6wrap[@]}" echo "[WARNING] Cannot determine the subdevice for Audio Card $AUDIOCARD."
        "${s6wrap[@]}" echo "[WARNING] This is what we see:"
        "${s6wrap[@]}" arecord --list-devices
        "${s6wrap[@]}" echo "[WARNING] We will assume it's Subdevice #0. If this is incorrect, set variable SUBDEVICE to the desired subdevice number."
        SUBDEVICE=0
    else
        "${s6wrap[@]}" echo "[INFO] System determined that we are using subdevice #$SUBDEVICE"
    fi   
else
    "${s6wrap[@]}" echo "[INFO] Using SUBDEVICE env variable for subdevice #$SUBDEVICE"
fi

# Figure out which NumID the mute button is unmute (which means set Mic Capture Switch = on):
capability="Mic Capture Switch"
if amixer --card "$AUDIOCARD" contents | grep -qo "$capability"; then
    "${s6wrap[@]}" echo "[INFO] Unmuting the microphone on Audio Card $AUDIOCARD ($capability on)"
    "${s6wrap[@]}" amixer -q -c "$AUDIOCARD" cset numid="$(amixer --card "$AUDIOCARD" contents|grep "$capability" | sed  -n 's|numid=\([0-9]\+\).*|\1|p')" on
else
    "${s6wrap[@]}" echo "[WARNING] Couldn't figure out which parameter controls the $capability. Left it as-is."
    "${s6wrap[@]}" echo "[WARNING] If it doesn't work, you can try to figure this out manually with:"
    "${s6wrap[@]}" echo "          amixer --card $AUDIOCARD contents            # identity the correct numid for $capability"
    "${s6wrap[@]}" echo "          amixer -q -c $AUDIOCARD cset numid=xxx on    # replace xxx with the correct numid"
    "${s6wrap[@]}" echo "-------------------------------------------------------"
fi 

# Unmuting the audio output
capability="Speaker Playback Switch\|PCM Playback Switch"
if amixer --card "$AUDIOCARD" contents | grep -q "$capability"; then
    "${s6wrap[@]}" echo "[INFO] Unmuting the speaker on Audio Card $AUDIOCARD ($capability on)"
    "${s6wrap[@]}" amixer -q -c "$AUDIOCARD" cset numid="$(amixer --card "$AUDIOCARD" contents|grep "$capability" | sed  -n 's|numid=\([0-9]\+\).*|\1|p')" on
else
    "${s6wrap[@]}" echo "[WARNING] Couldn't figure out which parameter controls the $capability. Left it as-is."
    "${s6wrap[@]}" echo "[WARNING] If it doesn't work, you can try to figure this out manually with:"
    "${s6wrap[@]}" echo "          amixer --card $AUDIOCARD contents            # identity the correct numid for $capability"
    "${s6wrap[@]}" echo "          amixer --card $AUDIOCARD cset numid=xxx on   # replace xxx with the correct numid"
    "${s6wrap[@]}" echo "-------------------------------------------------------"
fi 

# Set input audio level to $AUDIOLEVEL_RX or 90% of the scale if it's not defined
capability="Mic Capture Volume"
unset couldnt_set
if amixer --card "$AUDIOCARD" contents | grep -q "$capability"; then
    audio_min="$(amixer --card "$AUDIOCARD" contents | grep -A1 "$capability" | sed -n 's|^.*,min=\([0-9]\+\).*$|\1|p')"
    audio_max="$(amixer --card "$AUDIOCARD" contents | grep -A1 "$capability" | sed -n 's|^.*,max=\([0-9]\+\).*$|\1|p')"
    AUDIOLEVEL_RX="${AUDIOLEVEL_RX:-90}"
    if [[ -n "$audio_min" ]] && [[ -n "$audio_max" ]]; then
        LEVEL="$(bc -l <<< "scale=0; ($audio_max - $audio_min) * $AUDIOLEVEL_RX / 100")"
        "${s6wrap[@]}" echo "[INFO] Setting audio input (RX) volume to $LEVEL (${AUDIOLEVEL_RX}% of max $audio_max) on Audio Card $AUDIOCARD"
        "${s6wrap[@]}" amixer -q -c "$AUDIOCARD" cset numid="$(amixer --card "$AUDIOCARD" contents|grep "$capability" | sed  -n 's|numid=\([0-9]\+\).*|\1|p')" "$LEVEL"
    else 
        couldnt_set=true
    fi
else
    couldnt_set=true
fi
if [[ "$couldnt_set" == true ]]; then
    "${s6wrap[@]}" echo "[WARNING] Couldn't figure out which parameter controls the $capability. Left it as-is."
    "${s6wrap[@]}" echo "[WARNING] If it doesn't work, you can try to figure this out manually with:"
    "${s6wrap[@]}" echo "          amixer --card $AUDIOCARD contents            # identity the correct numid for $capability and the max/min volume values"
    "${s6wrap[@]}" echo "          amixer --card $AUDIOCARD cset numid=xxx lll  # replace xxx with the correct numid and lll with the desired volume level"
    "${s6wrap[@]}" echo "-------------------------------------------------------"
fi 

# Switch mic the AGC off as this will mess with the audio levels
# If the card doesn't have this capability, it's OK and we don't need to warn the user
capability="Auto Gain Control"
if amixer --card "$AUDIOCARD" contents | grep -q "$capability"; then
    "${s6wrap[@]}" echo "[INFO] Switching off microphone ACG on Audio Card $AUDIOCARD ($capability off)"
    "${s6wrap[@]}" amixer -q -c "$AUDIOCARD" cset numid="$(amixer --card "$AUDIOCARD" contents|grep "$capability" | sed  -n 's|numid=\([0-9]\+\).*|\1|p')" off
fi

# Set output audio level to $AUDIOLEVEL_TX or halfway the scale if it's not defined
capability="Speaker Playback Volume\|PCM Playback Volume"
unset couldnt_set
if amixer --card "$AUDIOCARD" contents | grep -q "$capability"; then
    audio_min="$(amixer --card "$AUDIOCARD" contents | grep -A1 "$capability" | sed -n 's|^.*,min=\([0-9]\+\).*$|\1|p')"
    audio_max="$(amixer --card "$AUDIOCARD" contents | grep -A1 "$capability" | sed -n 's|^.*,max=\([0-9]\+\).*$|\1|p')"
    AUDIOLEVEL_TX="${AUDIOLEVEL_TX:-50}"
    if [[ -n "$audio_min" ]] && [[ -n "$audio_max" ]]; then
        LEVEL="$(bc -l <<< "scale=0; ($audio_max - $audio_min) * $AUDIOLEVEL_TX / 100")"
        "${s6wrap[@]}" echo "[INFO] Setting audio output (TX) volume to $LEVEL (${AUDIOLEVEL_TX}% of max $audio_max) on Audio Card $AUDIOCARD"
        "${s6wrap[@]}" amixer -q -c "$AUDIOCARD" cset numid="$(amixer --card "$AUDIOCARD" contents|grep "$capability" | sed  -n 's|numid=\([0-9]\+\).*|\1|p')" "$LEVEL"
    else 
        couldnt_set=true
    fi
else
    couldnt_set=true
fi
if [[ "$couldnt_set" == true ]]; then
    "${s6wrap[@]}" echo "[WARNING] Couldn't figure out which parameter controls the $capability. Left it as-is."
    "${s6wrap[@]}" echo "[WARNING] If it doesn't work, you can try to figure this out manually with:"
    "${s6wrap[@]}" echo "          amixer --card $AUDIOCARD contents            # identity the correct numid for $capability and the max/min volume values"
    "${s6wrap[@]}" echo "          amixer --card $AUDIOCARD cset numid=xxx lll  # replace xxx with the correct numid and lll with the desired volume level"
    "${s6wrap[@]}" echo "-------------------------------------------------------"
fi 
# ------------------------------------------------------------------------------------------------------------
# Now we will set the relevant DireWolf parameters

setdwconfig ADEVICE "plughw:$AUDIOCARD,$SUBDEVICE"

if [[ -n "$MYCALL" ]] && grep -qo "^[A-Z0-9]\+[-]\{0,1\}[0-9]\{0,2\}$" <<< "${MYCALL^^}"; then
    # just make sure that MYCALL doesn't simply end in a dash:
    if [[ "${MYCALL: -1}" == "-" ]]; then MYCALL="${MYCALL:0:-1}"; fi
    "${s6wrap[@]}" echo "[INFO] Setting MYCALL $MYCALL"
    setdwconfig MYCALL "${MYCALL^^}"
else
    "${s6wrap[@]}" echo "[FATAL] You must set your callsign in the MYCALL env variable!"
    "${s6wrap[@]}" echo "[FATAL] Currently, MYCALL is set to $([[ -n "$MYCALL" ]] && echo "${MYCALL^^}, which is an invalid callsign! Only use A-Z, 0-9 in your callsign, and any suffix must begin with \"-\" followed by 1 or 2 digits, for example 0A0AA-10." || echo "empty.")"
    "${s6wrap[@]}" echo "[FATAL] Terminating container execution. Fix this and try again."
    sleep infinity & wait $!
fi
if [[ -n "$PTT" ]]; then
    "${s6wrap[@]}" echo "[INFO] Setting PTT $PTT"
    setdwconfig PTT "$PTT"
fi

if [[ -n "$SYMBOL" ]]; then
    # This is dangerous - tell user to strongly prefer using the (partial) symbol description rather than the 2-char symbol value
    # There are many ways that the use of certain characters in the symbols will break the sed.
    # So -- strongly prefer using SYMBOL="normal car" over SYMBOL=\> (which should probably be escaped as SYMBOL=\\> for it to work)
    if grep -qo "^\s*#*\s*TBEACON.*SYMBOL=.*$" "$DWCONFIGFILE"; then 
        sed -i "s|^\s*#*\s*\(TBEACON.*SYMBOL=\).\+\(\b.*\)$|\1$SYMBOL\2|g" "$DWCONFIGFILE"
    else
        sed -i "s|^\s*#*\s*\(TBEACON.*\)$|\1 SYMBOL=$SYMBOL|g" "$DWCONFIGFILE"
    fi
    "${s6wrap[@]}" echo "[INFO] Setting SYMBOL: $(grep -o "^\s*#*\s*TBEACON.*$" "$DWCONFIGFILE")"
fi

if [[ -n "$OVERLAY" ]]; then
    if (( ${#OVERLAY} != 1 )) || grep -qo "[^A-Za-z0-9]\+" <<< "$OVERLAY"; then
        "${s6wrap[@]}" echo "[WARNING] Ignoring OVERLAY. It must be a single letter or digit. You specified: OVERLAY=$OVERLAY"
    else
        if grep -qo "^\s*#*\s*TBEACON.*OVERLAY=.*$" "$DWCONFIGFILE"; then 
            sed -i "s|^\s*#*\s*\(TBEACON.*OVERLAY=\).\+\(\b.*\)$|\1$OVERLAY\2|g" "$DWCONFIGFILE"
        else
            sed -i "s|^\s*#*\s*\(TBEACON.*\)$|\1 OVERLAY=$OVERLAY|g" "$DWCONFIGFILE"
        fi
    fi
    "${s6wrap[@]}" echo "[INFO] Setting OVERLAY: $(grep -o "^\s*#*\s*TBEACON.*$" "$DWCONFIGFILE")"
fi

if [[ -n "$VIA" ]]; then
    if grep -qo "[^A-Z0-9,-]\+" <<< "${VIA^^}"; then
        "${s6wrap[@]}" echo "[WARNING] Ignoring VIA. It must contain only A-Z, 0-9, \",\", and \"-\", for example \"WIDE1-1,WIDE2-1\". You specified: VIA=${VIA^^}"
    else
        if grep -qo "^\s*#*\s*TBEACON.*VIA=.*$" "$DWCONFIGFILE"; then 
            sed -i "s|^\s*#*\s*\(TBEACON.*VIA=\).\+\(\b.*\)$|\1${VIA^^}\2|g" "$DWCONFIGFILE"
        else
            sed -i "s|^\s*#*\s*\(TBEACON.*\)$|\1 VIA=${VIA^^}|g" "$DWCONFIGFILE"
        fi
    fi
    "${s6wrap[@]}" echo "[INFO] Setting VIA: $(grep -o "^\s*#*\s*TBEACON.*$" "$DWCONFIGFILE")"
fi

if [[ -n "$DW_TB_COMMENT" ]]; then
    DW_TB_COMMENT="${DW_TB_COMMENT//|/-}"       # replace | with - in comment to make it sed-safe
    if grep -qio "^\s*#*\s*TBEACON.*COMMENT=.*$" "$DWCONFIGFILE"; then 
        sed -i "s|^\s*#*\s*\(TBEACON.*COMMENT=\).\+\(\b.*\)$|\1${DW_TB_COMMENT}\2|g" "$DWCONFIGFILE"
    else
        sed -i "s|^\s*#*\s*\(TBEACON.*\)$|\1 COMMENT=${DW_TB_COMMENT}|g" "$DWCONFIGFILE"
    fi
    "${s6wrap[@]}" echo "[INFO] Setting COMMENT: $(grep -o "^\s*#*\s*TBEACON.*$" "$DWCONFIGFILE")"
fi

if [[ -n "$SMARTBEACONING" ]]; then
    setdwconfig SMARTBEACONING "$SMARTBEACONING"
    "${s6wrap[@]}" echo "[INFO] Setting SMARTBEACONING $SMARTBEACONING"
fi

# DW_EXTRA_CONFIGS has this syntax:
# DW_EXTRA_CONFIGS=
#       PARAM1=value string;
#       PARAM2=;
#       PARAM3;
#       PARAM4=remove
#
# In this case, PARAM1 is uncommented (if needed) and set with the value string (replacing any existing values)
#               PARAM2 is uncommented (if needed) and set with no value string (any existing values are removed)
#               PARAM3 is uncommented (if needed) and leaving any existing value string in place
#               PARAM4 is commented out
# Note that any quotes in the parameter or value string will be literally placed into the configuration file.
if [[ -n "$DW_EXTRA_CONFIGS" ]]; then
    # strip any newlines    
    DW_EXTRA_CONFIGS="${DW_EXTRA_CONFIGS//$'\n'/}"
    # Strip any extraneous spaces:
    DW_EXTRA_CONFIGS="${DW_EXTRA_CONFIGS#"${DW_EXTRA_CONFIGS%%[![:space:]]*}"}"   # strip leading space
    DW_EXTRA_CONFIGS="${DW_EXTRA_CONFIGS//; /;}"  # strip any trailing space after each ;
    readarray -td ";" configs < <(printf '%s' "${DW_EXTRA_CONFIGS}")
    # Now loop through each of the elements:
    for instance in "${configs[@]}"
    do
        # don't do this -- instance="${instance^^}"
        instance="${instance#"${instance%%[![:space:]]*}"}" #strip initial spaces
        param="${instance%% *}" # all before the first space
        value="${instance#* }"  # all after the first space
        value="${value#"${value%%[![:space:]]*}"}" # strip initial spaces
        if [[ -z "${instance}" ]]; then
            # Instance empty: skip
            continue
        else
            setdwconfig "${param}" "${value}"
        fi
    done
fi

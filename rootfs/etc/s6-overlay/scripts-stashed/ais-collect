#!/command/with-contenv bash
#shellcheck shell=bash
#shellcheck disable=SC2016,SC2068,SC2076,SC2086,SC2015,SC2164,SC1090,SC1091

# AIS-Collect:
# read AIS data from a AIS-Catcher web service and
# create and maintain a database with this data
#---------------------------------------------------------------------------------------------
# Copyright (C) 2022-2023, Ramon F. Kolb (kx1t)
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.
#---------------------------------------------------------------------------------------------

# redirect stderr to stdout so it's picked up in the docker logs
exec 2>&1
# all errors will show a line number and the command used to produce the error
SCRIPT_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd)/$(basename "$0")"
trap 'echo -e "[$(date)][$APPNAME][ERROR] $SCRIPT_PATH in line $LINENO when executing: $BASH_COMMAND returned ${?}"' ERR

APPNAME="$(hostname)/ais-collect"
echo "[$(date)][$APPNAME] Started as an s6 service"
[[ -n "$DEBUG" ]] && echo "[$(date)][$APPNAME] DEBUG=ON" || echo "[$(date)][$APPNAME] DEBUG=OFF"

renice -n 10 -p $$ >/dev/null 2>&1

declare -A VESSELS
declare -a VESSEL_INDEX
declare -a KEY_INDEX

[[ -z "${CHECK_INTERVAL}" ]] && CHECK_INTERVAL=30 || true
[[ -z "${VESSELDBFILE}" ]] && VESSELDBFILE="/data/vessel.db" || true
[[ -z "${VESSELDBLOCK}" ]] && VESSELDBLOCK="/run/vesseldb.lock" || true
[[ -z "${MIN_MSG_COUNT}" ]] && MIN_MSG_COUNT=10 || true
[[ -z "${MAX_MSG_AGE}" ]] && MAX_MSG_AGE=604800    # 1 week before a record gets erased from the database
[[ "${AIS_URL:0:4}" != "http" ]] && AIS_URL="http://${AIS_URL}"
[[ "${AIS_URL: -4}" != "json" ]] && AIS_URL="${AIS_URL}/ships.json"

RUNS_BEFORE_RESTART="$((3 * 60 * 60 / CHECK_INTERVAL))"

touch "$VESSELDBFILE"
rm -f "$VESSELDBLOCK"

for (( loops=0; loops<RUNS_BEFORE_RESTART; loops++ ))
do
    # If there's a lock file, wait until it's gone
    while [[ -f  $VESSELDBLOCK ]]
    do
        sleep 1
    done

    # Now lock the process for myself:
    touch "$VESSELDBLOCK"

    # First read the existing entries in from file
    if (( $(wc -l < "$VESSELDBFILE") > 0 ))
    then
        [[ -n "$DEBUG" ]] && echo reading VESSELS dict from file || true
        source "$VESSELDBFILE"
    fi

    # Now update it with the ones from the AIS_URL website.
    # Read VESSELS from the AIS_URL:
    ships_json="$(curl --compressed -sSL $AIS_URL)"

    # check if ships_json is empty. If so, continue the loop but don't count against loop counter
    if [[ -z "$ships_json" ]]
    then
        echo "[$(date)][$APPNAME] Warning: $AIS_URL did not return a valid ships.json object. This may be a start-up fluke, but if the message continues to appear, please check your ships.json data source!"
        rm -f "$VESSELDBLOCK"
        sleep $CHECK_INTERVAL
        (( loops-- ))
        continue
    fi

    eval "$(nice -n 20 jq -r '.ships[] | .mmsi as $mmsi | to_entries[] | @sh "VESSELS[\("\($mmsi):\(.key)")]=\(.value)"' <<< "$ships_json" )"
    # Add a last_updated field to all the newly entered or updated vessels:
    eval "$(nice -n 20 jq -r '.ships[] | .mmsi as $mmsi | to_entries[] | "VESSELS[\("\($mmsi):")"' <<< "$ships_json"|sort -u | sed 's/:/:last_updated\]='"$(date +%s)"'/g')"

    # create the indices and clean up text
    for keyvalue in ${!VESSELS[@]}
    do
        # add key to KEY_INDEX:
        [[ -n "${keyvalue#*:}" ]] && [[ ! " ${KEY_INDEX[*]} " =~ " ${keyvalue#*:} " ]] && KEY_INDEX+=("${keyvalue#*:}") || true
        # add mmsi to VESSEL_INDEX:
        [[ -n "${keyvalue%%:*}" ]] && [[ ! " ${VESSEL_INDEX[*]} " =~ " ${keyvalue%%:*} " ]] && VESSEL_INDEX+=("${keyvalue%%:*}") || true
    done

    # Clean out the ones that are too old:
    for vessel in "${VESSEL_INDEX[@]}"
    do

        [[ -n "${VESSELS[${vessel}:last_updated]}" ]] && age=$(( $(date +%s) - ${VESSELS[${vessel}:last_updated]} )) || age=0

        if     [[ ! $age =~ ^[0-9]+$ ]] \
            || (( age > MAX_MSG_AGE ))
        then
            [[ -n "$DEBUG" ]] && echo "removed ${vessel}: pattern ($age)=$([[ ! $age =~ ^[0-9]+$ ]] && echo -n true || echo -n false) >maxage ($age>$MAX_MSG_AGE)=$( (( age > MAX_MSG_AGE )) && echo -n true || echo -n false)"
            for key in "${KEY_INDEX[@]}"
            do
                unset "VESSELS[${vessel}:${key}]"
            done
        fi

        # Make sure that no notifications will be sent if NOTIFY_ONLY_NEW_ON_STARTUP is set and this is the first run ever:
        # Note -- this code has cross-contamination from the Mastodon-Notifier and will need to be updated if new
        # notification media are added. This is unfortunate but to avoid it means adding a LOT more logic.
        # If the criteria are met, we will tag the last notification time to the current time, so it won't renotify until much later.
        if     [[ -n "$NOTIFY_ONLY_NEW_ON_STARTUP" ]] \
            && [[ ! -f /data/container_has_run_before ]]
        then
            spread="$(bc -l <<< "$MASTODON_NOTIFY_EVERY * 0.2")"
	    printf -v adjust "%.0f" "$(bc -l <<< "($RANDOM/32767)*$spread - $spread/2")"
            VESSELS[${vessel}:notification:last]="$(( $(date +%s) + adjust ))"
        fi
    done

    if     [[ -n "$NOTIFY_ONLY_NEW_ON_STARTUP" ]] \
        && [[ ! -f /data/container_has_run_before ]]
    then
        touch /data/container_has_run_before
        [[ -n "$DEBUG" ]] && echo "This was the first container run ever and NOTIFY_ONLY_NEW_ON_STARTUP was set. All vessels known as of this initial run have been tagged notified with date ${VESSELS[${vessel}:notification:last]}"
    fi

    # Write back to file

    source "/usr/share/vesselalert/save_databases"

    # Clean up memory; arrays will be re-read next turn
    unset KEY_INDEX
    unset VESSEL_INDEX
    unset VESSELS
    unset SHIPTYPE
    unset SHIPSTATUS
    unset COUNTRY 

    rm -f "$VESSELDBLOCK"

    sleep $CHECK_INTERVAL

done
echo "[$(date)][$APPNAME] restarting $APPNAME to clean up memory"